Hive Window and Analytics Functions
---------------------------------------

CREATE TABLE t_employee (id INT, emp_name VARCHAR(20), dep_name VARCHAR(20),
salary DECIMAL(7, 2), age DECIMAL(3, 0));

INSERT INTO t_employee VALUES
( 1,  'Matthew', 'Management',  4500, 55),
( 2,  'Olivia',  'Management',  4400, 61),
( 3,  'Grace',   'Management',  4000, 42),
( 4,  'Jim',     'Production',  3700, 35),
( 5,  'Alice',   'Production',  3500, 24),
( 6,  'Michael', 'Production',  3600, 28),
( 7,  'Tom',     'Production',  3800, 35),
( 8,  'Kevin',   'Production',  4000, 52),
( 9,  'Elvis',   'Service',     4100, 40),
(10,  'Sophia',  'Sales',       4300, 36),
(11,  'Samantha','Sales',       4100, 38);

We can use the RANK() function to find out who earns the most within each department:

SELECT dep_name, emp_name, salary
FROM (
  SELECT
    dep_name, emp_name, salary
    ,RANK() OVER (PARTITION BY dep_name ORDER BY salary DESC) AS rnk
  FROM t_employee
) a
WHERE rnk = 1;

Result:
---------
Management      Matthew 4500.00
Production      Kevin   4000.00
Sales   Sophia  4300.00
Service Elvis   4100.00
Time taken: 28.756 seconds, Fetched: 4 row(s)
hive>


Cumulative Distribution

We can calculate the cumulative distribution of salaries among all departments. For example, salary 4000‘s cumulative distribution is 0.55, which means 55% people’s salaries are less or equal to 4000. To calculate this, we first count the frequencies of every salary, and do a cumulative summing:

SELECT
  salary
  ,SUM(cnt) OVER (ORDER BY salary)
  / SUM(cnt) OVER (ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING
                   AND UNBOUNDED FOLLOWING)
FROM (
  SELECT salary, count(*) AS cnt
  FROM t_employee
  GROUP BY salary
) a;

Result:
-------
Total MapReduce CPU Time Spent: 15 seconds 840 msec
OK
3500.00 0.09090909090909091
3600.00 0.18181818181818182
3700.00 0.2727272727272727
3800.00 0.36363636363636365
4000.00 0.5454545454545454
4100.00 0.7272727272727273
4300.00 0.8181818181818182
4400.00 0.9090909090909091
4500.00 1.0
Time taken: 58.564 seconds, Fetched: 9 row(s)
hive>


This can also be done with Hive’s CUME_DIST() window function. There’s another PERCENT_RANK() function, which computes the rank of the salary as percentage.

SELECT
  salary
  ,CUME_DIST() OVER (ORDER BY salary) AS pct_cum
  ,PERCENT_RANK() OVER (ORDER BY salary) AS pct_rank
FROM t_employee;

Result:
-------
Total MapReduce CPU Time Spent: 8 seconds 190 msec
OK
3500.00 0.09090909090909091     0.0
3600.00 0.18181818181818182     0.1
3700.00 0.2727272727272727      0.2
3800.00 0.36363636363636365     0.3
4000.00 0.5454545454545454      0.4
4000.00 0.5454545454545454      0.4
4100.00 0.7272727272727273      0.6
4100.00 0.7272727272727273      0.6
4300.00 0.8181818181818182      0.8
4400.00 0.9090909090909091      0.9
4500.00 1.0     1.0
Time taken: 29.137 seconds, Fetched: 11 row(s)
hive>


For Details refer:
http://shzhangji.com/blog/2017/09/04/hive-window-and-analytical-functions/
